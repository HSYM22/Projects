# -*- coding: utf-8 -*-
"""Human_initiative_internship_2023_csv_V3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YRe_DK4t_A3Lgfp1RHeOQq2qsYlKMnmJ
"""

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import statistics
import re
import numpy as np
import matplotlib.ticker as ticker

from collections import Counter
import plotly.graph_objects as pgo
import plotly.express as px

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

from google.colab import drive
drive.mount('/content/drive')

hum_in = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Dataset Transaksi 2021-2023 - bq-results-20230605-105035-1685962243909.csv')

pd.set_option('display.max_columns', None)
hum_in.head()

"""# EDA (Exploratory Data analysis)

##**Business Problem**##

In here we explore possibilities of variables to be analysed in order to achieve specified business goals.



*   Obtain information on lifetime benefactor
*   information on product performance


Day of week - pandas
pie chart percentage / per column category


Marketer - count client
Marketer - value count nominal


Donasi VALUTA Asing - USD, EUR                                     Count USD, EUR, IDR, GBP
"""

hum_in['Tanggal_Donasi'] = pd.to_datetime(hum_in['Tanggal_Donasi'])
hum_in.info()

hum_in.isnull().sum()

hum_in.fillna(0, inplace=True)
hum_in.drop_duplicates(keep=False, inplace=True)

hum_in.shape

hum_in.isnull().sum()

hum_in['Cabang'].unique()

hum_in['Nama_Donatur'].nunique()

#Definition function to remove the " . " from strings datatype, to be converted to float.

def remove_periods(s):
    if isinstance(s, str):
        if s.count('.') > 1:
            return s.replace('.', '')
        else:
            return s
    else:
        return s

hum_in['Nilai_Ekuivalen'] = pd.DataFrame(hum_in['Nilai_Ekuivalen'].apply(remove_periods))
hum_in['Nilai_Donasi'] = pd.DataFrame(hum_in['Nilai_Donasi'].apply(remove_periods))

convert_dict = {'Nilai_Ekuivalen': int,
                'Nilai_Donasi': int}

hum_in = hum_in.astype(convert_dict)

"""## **Selecting individual donor**

Clean the following data ['Nama_Donatur'] by dropping specified values below:


1.   PT
2.   Aliansi / KOMUNITAS / Himpunan/ Society
3.   Yayasan / Gerakan / Charity
4.   SD/SMP/SMK/SMA
5.   JAMA'AH / Jamaah
6.   Sekolah
7.   KPP / DKM / BPJS
"""

HI_cleaned = hum_in[hum_in["Nama_Donatur"].str.contains
("PT|CV|supermarket|ORGANIZATIONS|PETRONAS|PLN|PKPU|SOCIETY|Quran|Organization|Group|Premium|DPD|Initiative|Yayasan|Society|Gerakan|jamaah|SD|SMP|SMK|SMA|Sekolah|masjid|Mesjid|BEM|BPJS|Komunitas|Masjid|Majlis|Crowdfunding|Give2asia|FINTEK|uniqlo|Uniqlo|Helping Hand|Donasi|Foundation|Relief|PERTAMINA|Pertamina|Aliansi|Hamba|KOMUNITAS|RS|Mitra|DKM|Himpunan|Wakaf|WAKAF|wakaf|KPP|LaunchGood|WEFA|BANK|Bank|bni|BNI|bri|BRI|Arab|Bunga|Delt|Turkiye|Turkey|Australia|Malaysia|Jerman|Berlin|Belanda|UK|Canada|Indonesia|INDONESIA|Kitabisa|Tokopedia|Shopee|Telkom|International|Charity|Majelis|Mandiri|MB|Link Aja|LINK AJA|Fliptech|Transfer|Nusantara|JAMA'AH|KUFAH") == False].reset_index(drop=True)
HI_cleaned.drop_duplicates(keep=False, inplace=True)
HI_cleaned.info()

HI_cleaned.shape

pd.set_option('display.max_rows', None)
Donatur = pd.DataFrame( HI_cleaned['Nama_Donatur'].unique()).sort_values(by=0, ascending= True)
Donatur.rename(columns={0:'Donatur'}, inplace = True)
Donatur.tail()

HI_cleaned[['Deskripsi','Nama_Produk']].nunique()

Donasi_total = pd.pivot_table(HI_cleaned, values=['Nilai_Ekuivalen','ID_Donatur'],
                              index=['Nama_Donatur'],
                              aggfunc={'Nilai_Ekuivalen':'sum','ID_Donatur':'count'}).reset_index()
Donasi_total = np.round(Donasi_total, 0)
Donasi_total.rename(columns={'Nilai_Ekuivalen':'Total_Donasi_IDR',
                             'ID_Donatur':'Freq_Donasi'}, inplace=True)
Donasi_total.sort_values(by='Total_Donasi_IDR', inplace=True, ascending= False)
Donasi_total.style.background_gradient(axis=0, cmap='Greens')

"""**Nama Produk** will be grouped (simplified category)

e.g;
1. Peduli Bencana Indonesia, Gempa Turki, Peduli Erupsi, Penanganan COVID_19 will be assigned as **'*Bencana*'**

2. Titipan Qurban , Aqiqah , Kambing Custom , 1/7 Sapi will be assigned as **'*Qurban*'**

3. Charity , Yatim , Infaq will be assigned as **'*Sedekah*'**
"""

campaign = pd.DataFrame(HI_cleaned['Nama_Produk'].value_counts()).reset_index()
campaign.rename(columns={"index":'Campaign',"Nama_Produk":'counts'}, inplace = True)
campaign.head(10)

pd.set_option('display.max_rows', None)
DC = pd.DataFrame.pivot_table(HI_cleaned, values=['Nilai_Ekuivalen'],index=['ID_Donasi','Nama_Donatur','Nama_Produk'], aggfunc= 'count').reset_index()
DC.rename(columns={'Nilai_Ekuivalen':'Freq_Donasi'}, inplace=True)
DC.sort_values(by='Freq_Donasi', inplace=True, ascending= False )
DC.style.background_gradient(axis=0, cmap='Greens')

HI_cleaned.loc[HI_cleaned['Nama_Donatur'] == 'Udi Nugroho'].reset_index(drop=True)

HI_cleaned[HI_cleaned['Nama_Donatur']=='Udi Nugroho'].drop_duplicates().info()

HI_cleaned[HI_cleaned['Nama_Donatur']=='Udi Nugroho'][['Nama_Produk','Deskripsi']].nunique()

HI_cleaned[HI_cleaned['Nama_Donatur']=='Udi Nugroho'][['ID_Donasi']].nunique()

HI_cleaned[HI_cleaned['Nama_Donatur']=='Udi Nugroho']['Nama_Produk'].unique()

HI_cleaned[HI_cleaned['Nama_Donatur']=='Taras Wibawa Siregar']['Nama_Produk'].unique()

HI_cleaned[HI_cleaned['Nama_Donatur']=='Udi Nugroho']['Nama_Produk'].unique()

Infaq = pd.DataFrame(HI_cleaned.loc[HI_cleaned['Nama_Produk'].values == 'Infaq Shodaqoh'])
Infaq.tail()

#Infaq.set_index('Tanggal_Donasi', inplace=True)

# Create a figure and axis
#fig, ax = plt.subplots()

# Plot the specific column as a line plot with customized size and color
#ax.plot(Infaq.index, Infaq['Nilai_Ekuivalen'], color='red', linewidth=1)

# Set labels for the x-axis and y-axis
#ax.set_xlabel('Tanggal')
#ax.set_ylabel('Valuasi Donasi')

# Set a title for the plot
#ax.set_title('Infaq Shodaqoh')

#ax.set_ylim(0, 110000000)

# Customize the size of the plot
#fig.set_size_inches(12, 5)

"""This function is to enable grouping summary of campaign, based on the majority percentage of total transactions count per user."""

campaign = pd.DataFrame(HI_cleaned['Nama_Produk'].value_counts()).reset_index()
campaign.rename(columns={"Nama_Produk":'Frequency','index':'Nama_Produk'}, inplace = True)
campaign

"""# Statistics Modul Donation per Campaign"""

campaign_mapping = {
    'Bencana': ['Peduli Penanganan Covid19','Kemanusiaan Terikat', 'Peduli Palestina', 'Kemanusiaan Umum','Peduli Bencana Indonesia', 'Peduli Erupsi Semeru', 'Peduli Banjir Sulawesi',"Peduli Gempa Turki", 'PEDULI GEMPA CIANJUR', 'Peduli Bencana Maluku', 'Peduli Banjir Nasional', 'Peduli Bencana Kebakaran','Bingkisan Wilayah Bencana & 3T', 'Peduli Syria','Peduli Rohingya','Peduli Bencana Lainnya Terikat'],
    'Qurban': ['Kambing Kandang','1/7 Sapi Earlybird','Sedekah Daging', '1/7 Sapi Flash Sale','1/7 Sapi - Qurban Karyawan HI','Kambing/Domba Tipe C','1/7 Sapi Tipe D','1/7 Sapi Tipe C','1/7 Sapi Tipe A Harga Khusus','1/7 Sapi Tipe B', '1/7 Sapi Tipe A', 'Titipan Qurban','Sapi Kandang','1/7 Sapi Palestina','Pengadaan Hewan Qurban','1/7 Sapi Tipe A Custom ','1/7 Sapi Tipe B Custom', 'Kambing Tipe C Custom', 'Samudera Peduli 1 Sapi NTT & Papua', 'Titipan Qurban','Aqiqah'],
    'Sodaqoh': ['Infaq Shodaqoh','Peduli Kesehatan','Program Berbagi Air', 'Peduli Yatim & Janda', 'Rumah Belajar Online', 'Pembangunan Sarana Ibadah', 'Pembangunan Sarana Umum', 'Sebar Al Quran Nusantara (SAN)', 'Program Sadar Gizi', 'Tabung Peduli Umum', 'Berbagi Berkah','Berbagi THR','Beasiswa','Berbagi Bingkisan','Berbagi Ifthar'],
    'Zakat': ["Zakat Profesi/Penghasilan","Zakat Emas, Perak dan Uang","Zakat Perdagangan dan Perusaha","Zakat Pertanian, Perkebunan da","Fidyah","0","Penyaluran Zakat Maal", "Program penyaluran zakat","Zakat Fitrah","Penyaluran Zakat Fitrah","Penyaluran Fidyah"],
    'OTA': ['Orang Tua Asuh Palestina', 'Orang Tua Asuh Umum', ]}

# Create a function to assign the campaign group based on the product name
def assign_campaign(nama_produk):
    if isinstance(nama_produk, str):
        for campaign, keywords in campaign_mapping.items():
            for keyword in keywords:
                if keyword.lower() in nama_produk.lower():
                    return campaign
    return 'Other'  # Assign 'Other' if no match is found

# Apply the function to create the 'Campaign' column
HI_cleaned['Campaign'] = HI_cleaned['Nama_Produk'].apply(assign_campaign)

# Calculate the frequency of each campaign based on Nama_Donatur
campaign_frequency = HI_cleaned.groupby(['Campaign','Nama_Donatur']).size().reset_index()
campaign_frequency.rename(columns={0:'Frequency'}, inplace = True)
campaign_frequency.head()

campaign_val = HI_cleaned.loc[:, ['Tanggal_Donasi','Campaign','Nama_Donatur','Nilai_Ekuivalen']]
campaign_val.head(20)

"""Max, min, median, mean valuasi donasi (timeline / month)"""

HI_cleaned['Campaign'].unique().tolist()

"""# Summary Existing and New Donor per Campaign"""

top_100_data = campaign_frequency.sort_values('Frequency', ascending=False).head(100)
top_100_data

"""# Data Visualisation on Campaign Category Comparison"""

#calculate sum of points for each team
campaign_groups = campaign_frequency.groupby(['Campaign'])['Frequency'].sum()

#define colours
colours = ['red', 'blue', 'turquoise', 'orange','green','purple']

#create bar plot with custom aesthetics
ax = campaign_groups.plot(kind='bar', title='Campaign Frequency',
               ylabel='Frequency', xlabel='Campaign', figsize=(9, 6), color=colours)

for i, v in enumerate(campaign_groups):
    ax.text(i, v, str(v), ha='center', va='bottom')

#rotate x-axis ticks vertically
plt.xticks(rotation=0)

plt.show()

Bencana_df = HI_cleaned[HI_cleaned['Campaign'] == 'Bencana']

fig, ax = plt.subplots(figsize=(26, 8))


# Plot the time series line plot for 'Item A'
ax.plot(Bencana_df['Tanggal_Donasi'], Bencana_df['Nilai_Ekuivalen'])

# Customize the plot if needed
ax.set_xlabel('Tanggal Donasi',fontsize=15, labelpad=20)
ax.set_ylabel('Total Donasi', fontsize=15,labelpad=20)
ax.set_title('Donasi Bencana 2021-2023', fontsize=22, y=1.05)

# Rotate x-axis labels if necessary
plt.xticks(rotation=0)

#format numerical values with a thousands separator (period) and without any decimal places.
formatter = ticker.FuncFormatter(lambda x, pos: '{:,.0f}'.format(x))
plt.gca().yaxis.set_major_formatter(formatter)

# Display the plot
plt.show()

zakat_df = HI_cleaned[HI_cleaned['Campaign'] == 'Zakat']

fig, ax = plt.subplots(figsize=(26, 8))


# Plot the time series line plot for 'Item A'
ax.plot(zakat_df['Tanggal_Donasi'], zakat_df['Nilai_Ekuivalen'],color='Green')


# Customize the plot if needed
ax.set_xlabel('Tanggal Donasi',fontsize=15, labelpad=20)
ax.set_ylabel('Total Donasi', fontsize=15,labelpad=20)
ax.set_title('Donasi Zakat 2021-2023', fontsize=22, y=1.05)

# Rotate x-axis labels if necessary
plt.xticks(rotation=0)

#format numerical values with a thousands separator (period) and without any decimal places.
formatter = ticker.FuncFormatter(lambda x, pos: '{:,.0f}'.format(x))
plt.gca().yaxis.set_major_formatter(formatter)

# Display the plot
plt.show()

OTA_df = HI_cleaned[HI_cleaned['Campaign'] == 'OTA']

fig, ax = plt.subplots(figsize=(26, 8))


# Plot the time series line plot for 'Item A'
ax.plot(OTA_df['Tanggal_Donasi'], OTA_df['Nilai_Ekuivalen'], color='Orange')


# Customize the plot if needed
ax.set_xlabel('Tanggal Donasi',fontsize=15, labelpad=20)
ax.set_ylabel('Total Donasi', fontsize=15,labelpad=20)
ax.set_title('Donasi OTA 2021-2023', fontsize=22, y=1.05)

# Rotate x-axis labels if necessary
plt.xticks(rotation=0)

#format numerical values with a thousands separator (period) and without any decimal places.
formatter = ticker.FuncFormatter(lambda x, pos: '{:,.0f}'.format(x))
plt.gca().yaxis.set_major_formatter(formatter)


# Display the plot
plt.show()

Qurban_df = HI_cleaned[HI_cleaned['Campaign'] == 'Qurban']

fig, ax = plt.subplots(figsize=(26, 7))

# Plot the time series line plot for 'Item A'
ax.plot(Qurban_df['Tanggal_Donasi'], Qurban_df['Nilai_Ekuivalen'], color='Red')

# Customize the plot if needed
ax.set_xlabel('Tanggal Donasi',fontsize=15, labelpad=20)
ax.set_ylabel('Total Donasi', fontsize=15,labelpad=20)
ax.set_title('Donasi Qurban 2021-2023', fontsize=22, y=1.05)

# Rotate x-axis labels if necessary
plt.xticks(rotation=0)
formatter = ticker.FuncFormatter(lambda x, pos: '{:,.0f}'.format(x))
plt.gca().yaxis.set_major_formatter(formatter)


# Display the plot
plt.show()

Sodaqoh_df = HI_cleaned[HI_cleaned['Campaign'] == 'Sodaqoh']

fig, ax = plt.subplots(figsize=(28, 7))

# Plot the time series line plot for 'Item A'
ax.plot(Sodaqoh_df['Tanggal_Donasi'], Sodaqoh_df['Nilai_Ekuivalen'], color='purple')

# Customize the plot if needed
ax.set_xlabel('Tanggal Donasi',fontsize=15, labelpad=20)
ax.set_ylabel('Total Donasi', fontsize=15,labelpad=20)
ax.set_title('Donasi Sodaqoh 2021-2023', fontsize=22, y=1.05)

# Ticks label
plt.xticks(rotation=0)
formatter = ticker.FuncFormatter(lambda x, pos: '{:,.0f}'.format(x))
plt.gca().yaxis.set_major_formatter(formatter)

# Display the plot
plt.show()

"""# Donor Purchase Behaviour"""

# Create a dictionary of purchases made by each individual
campaign_dict = campaign_frequency.groupby('Nama_Donatur').apply(lambda x: list(zip(x['Campaign'], x['Frequency']))).to_dict()

# Initialize a dictionary to hold the 'Behaviour' for each individual
behaviour_dict = {}

# Determine the 'Behaviour' for each individual
for nama_donatur, campaigns in campaign_dict.items():
    counter = Counter()
    total_quantity = 0
    for c, qty in campaigns:
        counter[c] += qty
        total_quantity += qty
    most_common_item_quantity = counter.most_common(1)[0][1]
    if most_common_item_quantity / total_quantity > 0.5:
        behaviour = 'Homogenous'
    else:
        behaviour = 'Heterogeneous'
    behaviour_dict[nama_donatur] = behaviour

# Create the 'Behaviour' column in the DataFrame
campaign_frequency['Behaviour'] = campaign_frequency['Nama_Donatur'].map(behaviour_dict)

# Create a new DataFrame that groups by 'Name' and 'Behaviour' and sums 'Quantity'
Donatur_behaviour = campaign_frequency.groupby(['Nama_Donatur', 'Behaviour'])['Frequency'].sum().reset_index()
campaign_frequency.rename(columns={'Frequency':'Donation Count'}, inplace = True)
Donatur_behaviour.sort_values('Frequency', ascending=False)

f = Donatur_behaviour.groupby(["Behaviour"]).agg({"Nama_Donatur":"count"})
f

convert_dict = {'Nama_Donatur': float}

f = f.astype(convert_dict)

f.info()

"""**Create a pie chart comparing Heterogenous and Homogenous donor behaviour**

---


"""

item_names = f.index.to_list()
quantities = f.sum(axis=1)

colours = ['yellow', 'lime']

# Create the pie chart
plt.pie(quantities, labels=item_names, shadow = True, colors = colours, autopct='%1.1f%%')

# Add a title
plt.title('Donatur Behaviour', fontsize = 15)

# Set the aspect ratio to make the pie chart a circle
plt.axis('equal')

# Display the pie chart
plt.show()

HI_cleaned['Tanggal_Donasi'] = HI_cleaned['Tanggal_Donasi'].dt.strftime('%Y-%m')

# Group and compute sum of quantity
campaign_group = HI_cleaned.groupby(['Tanggal_Donasi', 'Nama_Donatur', 'Campaign'])['Nilai_Ekuivalen'].count().reset_index()
campaign_group.rename(columns={'Nilai_Ekuivalen': 'Frequency'}, inplace=True)
campaign_group.drop(['Campaign', 'Frequency'], axis=1, inplace=True)
campaign_group.tail()

Donatur_behaviour.tail()

#Merge the total quantity DataFrame with the original grouped DataFrame
df_merged = pd.merge(Donatur_behaviour, campaign_group, how='left', on=['Nama_Donatur'])

#change the datatype ['Tanggal_Donasi'] to datetime
df_merged['Tanggal_Donasi'] = pd.to_datetime(df_merged['Tanggal_Donasi'])
df_merged['Tanggal_Donasi'] = df_merged['Tanggal_Donasi'].dt.to_period('M')

df_merged.rename(columns={'Frequency':'Donasi_Count'}, inplace=True)
df_merged.drop_duplicates(keep=False, inplace=True)
df_merged.sort_values(by ='Tanggal_Donasi', ascending=False)

monthly_counts = df_merged.groupby(['Tanggal_Donasi', 'Behaviour']).size().unstack()

# Plot the bar chart
ax = monthly_counts.plot(kind='bar', figsize=(30, 7), width=0.8)

# Set labels and title
plt.xlabel('Period 2021 - 2023',fontsize=15, labelpad=20)
plt.ylabel('Behaviour Count',fontsize=15, labelpad=20)
plt.title('Types of Behaviour per Month', fontsize=20, y=1.05)

# Set legend
plt.legend(title='Behaviour')

plt.xticks(rotation=0)

# Show the plot
plt.show()